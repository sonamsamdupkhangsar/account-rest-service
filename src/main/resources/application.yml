logging:
  level:
    root: trace
    com.nextflix: off
    me:
      sonam: info
info:
  app:
    name: Springboot me.sonam.account.Application
    description: This is a Springboot application
    version: 1.0.0

management:
  endpoint:
    health:
      show-details: always

server:
  port: 8080

spring:
  application:
    name: account-rest-service
  r2dbc:
    url: r2dbc:postgresql://${POSTGRES_SERVICE}/${POSTGRES_DBNAME}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    properties:
      sslMode: ${DB_SSLMODE}
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${ISSUER_URI}
          audiences: oauth-client, b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager

user-rest-service:
    root: http://user-rest-service
    activate: /users/{authenticationId}/active
    delete: /users/

authentication-rest-service:
  root: http://authentication-rest-service
  activate: /authentications/{authenticationId}/active
  delete: /authentications/
  update-no-auth-password: /authentications/noauth/password

email-rest-service:
  root: http://email-rest-service
  emails: /emails

account-rest-service:
  root: ${API_GATEWAY}
  activate: /accounts/{authenticationId}/active/{secret}

auth-server:
  root: http://authorization-server/issuer
  oauth2token:
    path: /oauth2/token
    grantType: client_credentials

emailFrom: ${EMAIL_FROM}
emailBody: Please click on this link to activate your account
secretExpire: 2

passwordResetPath: ${ISSUER_URI}/password/{email}/{secret}

permitpath:
  - path: /accounts/api/health/*
  - path: /accounts/active/*/*
    httpMethods: GET
  - path: /accounts/*/active/*
    httpMethods: GET
  - path: /accounts/emailactivationlink/*
    httpMethods: PUT
  - path: /accounts/emailmysecret/*
    httpMethods: PUT
  - path: /accounts/*/*
    httpMethods: POST
  - path: /accounts/email/authenticationId/*
    httpMethods: PUT
  - path: /accounts/validate/secret/*/*
    httpMethods: PUT
  - path: /actuator/info
  - path: /accounts/authentications/password
    httpMethods: PUT
  - path: /accounts/email/*
    scopes: message.write

# request to create a jwt token for outbound `email` path when any requestcomes into /accounts/(.)* path (regex)
jwtrequest:
  - in:  /accounts/emailactivationlink/(.)*
    out: /emails
    inHttpMethods: post
    accessToken:
      option: request
      scopes: message.read message.write
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /accounts/emailmysecret/(.)*
    out: /emails
    inHttpMethods: post
    accessToken:
      option: request
      scopes: message.read message.write
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /accounts/email/authenticationId/(.)*
    out: /emails
    inHttpMethods: post
    accessToken:
      option: request
      scopes: message.read message.write
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /accounts/active/email-link/(.)*
    out: /emails
    inHttpMethods: post
    accessToken:
      option: forward
      scopes: message.read message.write
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /accounts/(.)*/(.)*
    out: /emails
    inHttpMethods: post
    accessToken:
      option: forward
  - in: /accounts/(.)*/active/(.)*
    out: /users/(.)*/active
    accessToken:
      option: request
      scopes: message.read message.write
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}

auth-manager-app: ${AUTH_MANAGER_APP_URL}
